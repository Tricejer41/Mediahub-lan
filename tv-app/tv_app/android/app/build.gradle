apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

/**
 * Configuración React Native (puedes dejarla por defecto).
 */
react {
  // root = file("../")
  // reactNativeDir = file("../node_modules/react-native")
  // codegenDir = file("../node_modules/@react-native/codegen")
  // cliFile = file("../node_modules/react-native/cli.js")
  // debuggableVariants = ["debug"]
  // nodeExecutableAndArgs = ["node"]
  // bundleCommand = "bundle"
  // bundleAssetName = "index.android.bundle"
  // entryFile = file("../index.js")
  // extraPackagerArgs = []
}

/** ProGuard desactivado para release por ahora */
def enableProguardInReleaseBuilds = false

/** Usar JSC si Hermes está deshabilitado */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
  /** Versiones heredadas del rootProject.ext (de android/build.gradle) */
  ndkVersion rootProject.ext.ndkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion
  compileSdk rootProject.ext.compileSdkVersion

  namespace "com.mediahub.tv"

  defaultConfig {
    applicationId "com.mediahub.tv"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode 1
    versionName "1.0"

    // Si llegas a pasar el límite de métodos:
    // multiDexEnabled true
  }

  signingConfigs {
    debug {
      storeFile file('debug.keystore')
      storePassword 'android'
      keyAlias 'androiddebugkey'
      keyPassword 'android'
    }
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.debug
    }
    release {
      // En producción usa tu propio keystore
      signingConfig signingConfigs.debug
      minifyEnabled enableProguardInReleaseBuilds
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
    }
  }

  /** Compilar con Java/Kotlin 17 (requisito para AGP 8.x) */
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
  }
  kotlinOptions {
    jvmTarget = '17'
  }

  /** Evitar warnings/choques de licencias en META-INF */
  packagingOptions {
    resources {
      excludes += ["/META-INF/{AL2.0,LGPL2.1}"]
    }
  }
}

dependencies {
  // La versión de react-android la fija el plugin de RN
  implementation("com.facebook.react:react-android")

  if (hermesEnabled.toBoolean()) {
    implementation("com.facebook.react:hermes-android")
  } else {
    implementation jscFlavor
  }

  // No forces aquí androidx.core:core-ktx; la trae RN/Screens/GestureHandler.
  // Si alguna lib lo exige explícito, puedes fijarlo así (ya con compileSdk 35):
  // implementation("androidx.core:core-ktx:1.16.0")
}

/**
 * Autolinking de módulos nativos de RN.
 * Asegúrate de haber corrido `npm ci` en tv_app para que exista este gradle.
 */
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle");
applyNativeModulesAppBuildGradle(project)
